1.MySQL中存在float,double等非标准数据类型，也有decimal这种标准数据类型。
其区别在于，float，double等非标准类型，在DB中保存的是近似值，而Decimal则以字符串的形式保存数值。
float，double类型是可以存浮点数（即小数类型），但是float有个坏处，当你给定的数据是整数的时候，那么它就以整数给你处理。
这样我们在存取货币值的时候自然遇到问题，我的default值为：0.00而实际存储是0，同样我存取货币为12.00，实际存储是12
============
2.web.xml加载顺序：context-param->listener -> filter -> servlet
SSM框架 启动tomcat 加载顺序：web.xml中spring的applicationContext.xml文件 -- spring的监听器 -- 

3.maven打包没有xml文件解决：
		<resources>
            <resource>
                <directory>src/main/java</directory>
                <includes>
                    <include>**/*.xml</include>
                </includes>
                <filtering>false</filtering>
            </resource>
        </resources>
		
4.swich（） case 遇到break 停止没有break执行default

5.sql执行顺序：select –>where –> group by–> having–>order by

6.linux 下清屏  clear 或 ctrl+l(小写l)

7.192.168.150.101 root	密码：F0rtUne32
lmsvrnts0006：D0llioU83
47.91.78.254 服务器账号root 密码：F0rtUne32
ssh命令：例:传输文件 scp /usr/local/springcloud-client/eureka/wr-gateway.jar  root@10.0.100.11:/usr/local/springcloud-client/eureka/ 
	      进入ssh服务器：ssh root@10.0.100.11
scp /usr/local/springcloud-client/eureka/WarrantyRegistration-service-8001.jar  root@10.0.100.11:/usr/local/springcloud-client/nginx_client/
scp /usr/local/springcloud-client/eureka/  root@10.0.100.11:/usr/local/springcloud-client/nginx_client/
java多态：
SVN:Honsen
2mRqS3Rq62GAkWuA


8.MK ,coach ,Furla ,Kate spade,Mulberry,ysl,Longchamps,Tory Burchs
=====================================DUBBO================================
9.dubbo支持多种类型的注册中心：

  Multicast注册中心
  Zookeeper注册中心
  Redis注册中心
  Simple注册中心
  Dubbo建议使用Zookeeper作为服务的注册中心。
10.Dubbo 是什么：
一款分布式服务框架
高性能和透明化的RPC远程服务调用方案
SOA服务治理方案
11.Dubbo缺省协议采用单一长连接和NIO异步通讯，适合于小数据量大并发的服务调用，以及服务消费者机器数远大于服务提供者机器数的情况。
 
12.通过@Reference注解,dubbo会在扫描的时候会自动帮我们代理接口（见下图）,然后通过rpc调用远程服务。@service ：在注册中心注册服务
group
当一个接口有多种实现时，可以用group区分。
version
当一个接口的实现，出现不兼容升级时，可以用版本号过渡，版本号不同的服务相互间不引用。
接口升级时，要注意方法： 
* 在低压力时间段，先升级一半的提供者为新版本； 
* 再将所有的消费者升级为新版本； 
* 然后将剩下的一半提供者升级为新版本；
@service(version=1.0.0) -- @reference(version=1.0.0)
@service(version=2.0.0) -- @reference(version=2.0.0)
@service(version=2.0.0)/@service(version=2.0.0)..不区分版本   -- @reference(version=*)   仅限2.2.0版本以上支持
如果服务提供者使用了版本，消费者引入该服务时候，version字段不能为空。
=============================================================================
Spring Dubbo 注解无效，空指针？
dubbo-provider.xml:提供者先扫描spring框架，完成spring部分的扫描，然后将为dubbo框架提供服务；dubbo-consumer.xml 消费者部分相反，先扫描dubbo服务，后扫描spring部分。
dubbo-consumer.xml在 spring-mvc.xml中第一句引入。（先扫描dubbo配置，再扫描spring-mvc配置） dubbo-provider.xml 在spring-context.xml最后引入。（先扫描spring配置，再扫描dubbo配置）

ZooKeeper 是一个开源的分布式协调服务。
==============================================
spring 多数据源配置 ：1.配置多个数据源，引入数据源配置文件
					  2.mapper.xml文件 表名前面加上库名
@Primary和@Qualifier这两个注解的意思：　　

@Primary：  意思是在众多相同的bean中，优先使用用@Primary注解的bean.
@Qualifier ： 这个注解则指定某个bean有没有资格进行注入。
@Qualifier("XXX") 中的 XX是 Bean 的名称，所以 @Autowired 和 @Qualifier 结合使用时，自动注入的策略就从 byType 转变成 byName 了。
------------------
Spring帮助我们管理Bean分为两个部分，一个是注册Bean，一个装配Bean。
完成这两个动作有三种方式，一种是使用自动配置的方式、一种是使用JavaConfig的方式，一种就是使用XML配置的方式。
在自动配置的方式中，使用@Component去告诉Spring，我是一个bean，你要来管理我，然后使用@AutoWired注解去装配Bean(所谓装配，就是管理对象直接的协作关系)。
然后在JavaConfig中，@Configuration其实就是告诉spring，spring容器要怎么配置（怎么去注册bean，怎么去处理bean之间的关系（装配））。
那么就很好理解了，@Bean的意思就是，我要获取这个bean的时候，你spring要按照这种方式去帮我获取到这个bean。
到了使用xml的方式，也是如此。君不见<bean>标签就是告诉spring怎么获取这个bean，各种<ref>就是手动的配置bean之间的关系。
@Configuration可理解为用spring的时候xml里面的<beans>标签

@Bean可理解为用spring的时候xml里面的<bean>标签
用@Bean注解的方法：会实例化、配置并初始化一个新的对象，这个对象会由spring IoC 容器管理。

@Autowired 与@Resource的区别：
1、 @Autowired与@Resource都可以用来装配bean. 都可以写在字段上,或写在setter方法上。
2、 @Autowired默认按类型装配（这个注解是属业spring的），默认情况下必须要求依赖对象必须存在，
如果要允许null值，可以设置它的required属性为false，如：@Autowired(required=false) ，如果我们想使用名称装配可以结合@Qualifier注解进行使用，如下：
@Autowired()@Qualifier("baseDao")
private BaseDao baseDao;

3、@Resource（这个注解属于J2EE的），默认按照名称进行装配，名称可以通过name属性进行指定，如果没有指定name属性，当注解写在字段上时，
默认取字段名进行安装名称查找，如果注解写在setter方法上默认取属性名进行装配。当找不到与名称匹配的bean时才按照类型进行装配。

@Resource(name="baseDao")
private BaseDao baseDao;
推荐使用：@Resource注解在字段上，这样就不用写setter方法了，并且这个注解是属于J2EE的，减少了与spring的耦合。这样代码看起就比较优雅。

spring 整合 mybatis，有了 Spring 托管数据源，在 MyBatis 配置文件中仅仅需要关注性能化配置。
spring 整合 springmvc，若Spring的IOC容器和SpringMVC的IOC容器扫描的包有重合的部分，就会导致有的bean会被创建2次
===================================================
创建dubbo项目： 第一个子模块选择创建maven module -- 然后勾上create a simple project -- next -- 打包方式选择pom -- finish -- 删掉src文件夹 只留一个pom文件
第二个子模块 选择创建maven module -- 不勾create a simple project -- 输入module name之后选择maven项目类型为quickstart -- finish

CRUD sql：1.UPDATE table1 a  
LEFT JOIN table2 b ON a.id = b.id 
SET a.fee = b.fee
=============================================
关于 maven 打包：第三方jar包  打包到war 或者xml打包到war
<build>
		<finalName>bison-start</finalName>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.7.0</version>
				<configuration>
					<source>1.8</source>
					<target>1.8</target>
					<encoding>UTF-8</encoding>
					<!-- 将lib目录可能有的jar包打包进war -->
					<compilerArguments>
						<extdirs>${project.basedir}\src\main\webapp\WEB-INF\lib</extdirs>
					</compilerArguments>
				</configuration>
			</plugin>
		</plugins>
		<!-- 将xml打包进war -->
		<resources>
			<resource>
				<directory>src/main/java</directory>
				<includes>
					<include>**/*.xml</include>
				</includes>
				<filtering>false</filtering>
			</resource>
		</resources>
	</build>
springcloud 之Ribbon：
 Ribbon是Netflix发布的开源项目，主要功能是提供客户端的软件负载均衡算法，将Netflix的中间层服务连接在一起。
 Ribbon客户端组件提供一系列完善的配置项如连接超时，重试等。简单的说，就是在配置文件中列出Load Balancer（简称LB）后面所有的机器，
 Ribbon会自动的帮助你基于某种规则（如简单轮询，随即连接等）去连接这些机器。
Eureka(尤瑞卡)： 
Eureka是Netflix开发的服务发现框架，本身是一个基于REST的服务，主要用于定位运行在AWS域中的中间层服务，以达到负载均衡和中间层服务故障转移的目的。
SpringCloud将它集成在其子项目spring-cloud-netflix中，以实现SpringCloud的服务发现功能。	
分布式是否属于微服务？答案是肯定的。微服务的意思也就是将模块拆分成一个独立的服务单元通过接口来实现数据的交互。

分布式：一个业务拆分为多个子业务，部署在多个服务器上 。 
集群：同一个业务，部署在多个服务器上 。	

springboot支持https访问：证书生成 执行：keytool -genkey -alias tomcat  -storetype PKCS12 -keyalg RSA -keysize 2048  -keystore keystore.p12 -validity 3650
设置口令全为123456		

java中类加载时机：

1）使用new关键字实例化对象

2）读取一个类的静态字段（被final修饰、已在编译期把结果放在常量池的静态字段除外）

3）设置一个类的静态字段（被final修饰、已在编译期把结果放在常量池的静态字段除外）

4）调用一个类的静态方法	 
==============================================================
﻿1.springcloud和springboot的区别：
    SpringBoot专注于快速方便的开发单个个体微服务。
    SpringCloud是关注全局的微服务协调整理治理框架，它将SpringBoot开发的一个个单体微服务整合并管理起来，
    为各个服务之间提供，配置管理、服务发现、断路器、路由、微代理、事件总线、全局锁、精选决策、分布式会话等集成服务。
    SpringBoot可以离开SpringCloud独立开发项目，但是SpringCloud离不开SpringBoot，属于依赖关系。
    SpringBoot专注于快速、方便的开发单个微服务个体，SpringCloud关注全局的服务治理框架。
2.spring、springMvc、springBoot和springCloud的联系与区别:
   https://blog.csdn.net/alan_liuyue/article/details/80656687 
   

变量多态看左边， 
方法多态看右边， 
静态多态看左边。
java多态：
  所谓多态就是指程序中定义的引用变量所指向的具体类型和通过该引用变量发出的方法调用在编程时并不确定，而是在程序运行期间才确定，
  即一个引用变量到底会指向哪个类的实例对象，该引用变量发出的方法调用到底是哪个类中实现的方法，必须在由程序运行期间才能决定。
  因为在程序运行时才确定具体的类，这样，不用修改源程序代码，就可以让引用变量绑定到各种不同的类实现上，从而导致该引用变量调用的具体方法随之改变，
  即不修改程序代码就可以改变程序运行时所绑定的具体代码，让程序可以选择多个运行状态，这就是多态性
==================================================================================================
 分布式系统领域 定理CAP:
	CAP的3进2：
        最多只能同时较好的满足两个。
         CAP理论的核心是：一个分布式系统不可能同时很好的满足一致性，可用性和
         分区容错性这三个需求。
         因此，根据CAP原理将NoSQL数据库分成了满足CA原则、满足CP原则
         和满足AP原则三大类；
        CA-单点集群，满足一致性，可用性的系统，通常在课扩展性上不太强大。
        CP-满足一致性，分区容错性的系统，通常性能不是特别高。
        AP-满足可用性，分区容错性的系统，通常可能对一致性要求低一些
 而由于当前的网络硬件肯定会出现延迟丢包等问题，所以分区容错性是我们必须要实现的。
   所以我们只能在一致性和可用性之间进行权衡，没有NoSQL系统能同时保证这三点 
==========================================================================
Eureka 和 Zookeeper区别？
     Eureka是遵守AP原则
     Zookeeper是遵守CP原则     
     Zookeeper保证CP原则：
         1.1当向注册中心查询服务列表时，我们可以容忍注册中心返回的是几分钟以前的注册信息，
  但不能接受服务直接down掉不可用。也就是说，服务注册功能对可用性的要求高于一致性。
  但是zk会出现这一种情况，当master节点因为网络故障与其他节点失去联系时，剩余注册
  功能就会重新进行leader选举看。问题在于，选举leader的时间太长，30~120s，且选举期间
  整个zk集群都是不可用的，这就导致在选举期间注册服务瘫痪。在云部署的环境下，因网络问题
  使得zk集群失去master节点是较大概率会发生的事，虽然服务能够最终恢复，但是漫长的
  选举时间导致的注册长期不可用是不能容忍的。
        1.2Eureka看明白了这一点，因此在设计时就优先保证可用性。Eureka各个节点都是平等
  的，几个节点挂掉不会影响正常节点的工作，剩余节点依然可以提供注册和查询服务。
  而Eureka的客户端在向某个Eureka注册或者如果发现链接失败时，则会自动切换至其他节点，
  只要有一台Eureka还在，就能保证注册服务可用（保证可用），只不过查到的信息可能不是
  最新的（不保证一致性）。除此以外，Eureka还有一种自我保护机制，如果在15分钟内超过85%
  的节点都没有正常的心跳，那么Eureka就认为客户端与注册中心出现了网络故障，此时会出现
  一下几种情况：
      （1）Eureka不在从注册列表中移除因为长时间没收到心跳而应该过期的服务
      （2）Eureka仍然能够接受新服务的注册和查询请求，但是不会被同步到其他节点上
               （保证当前节点依然可用）
      （3）当网络稳定时，当前实例新的注册信息会被同步到其他节点中
  因此，Eureka可以很好的应对因网络故障导致部分节点失去联系的情况，而不会像zk那样
     是整个注册服务瘫痪。

=============================
在使用继承时需要记住三句话：

         1、子类拥有父类非private的属性和方法。

         2、子类可以拥有自己属性和方法，即子类可以对父类进行扩展。

         3、子类可以用自己的方式实现父类的方法。
		
多线程就是分时利用CPU，宏观上让所有线程一起执行 ，也叫并发		
====================================================
堆和栈的区别：
栈：存放基本类型的变量数据和对象的引用，但对象本身不存放在栈中，而是存放在堆（new 出来的对象）或者常量池中（字符串常量对象存放在常量池中。） 
堆：存放所有new出来的对象。 
栈内存归属于单个线程，每个线程都会有一个栈内存，其存储的变量只能在其所属线程中可见，即栈内存可以理解成线程的私有内存。而堆内存中的对象对所有线程可见。堆内存中的对象可以被所有线程访问。
栈分为3个部分：基本类型变量区、执行环境上下文、操作指令区(存放操作指令)。	
jvm只有堆区(heap)和方法区(下面)被所有线程共享，堆中不存放基本类型和对象引用，只存放对象本身	
静态区/方法区:
1.方法区又叫静态区，跟堆一样，被所有的线程共享。方法区包含所有的class和static变量。
2.方法区中包含的都是在整个程序中永远唯一的元素，如class，static变量。
3.全局变量和静态变量的存储是放在一块的，初始化的全局变量和静态变量在一块区域， 未初始化的全局变量和未初始化的静态变量在相邻的另一块区域。
1、堆用来存储new出来的对象和数组

2、栈用来存储基本类型变量和对象的引用变量的地址

3、方法区存储方法和static变量
=====================================
JVM 堆分区和非堆, 堆区域分为年轻代和老年代, 年轻代分为 Eden区和Servivor form Servivor to , 比例为8:1, 
当一个对象创建的时候先进入的是Eden, 当第一次垃圾回收的时候进入 Servivor from ,当再次垃圾回收的时候利用复制算法到Servivor to区, 
然后 to 和from 更好位置实现复制算法,减少碎片浪费,复制算法只能年轻代使用, 为什么会有分区的出现,主要是为了提高GC扫描堆的时候提高效率,
因为很多对象符合朝生夕死的特点, 标记整理和清楚适合老年代
==========================================
线程是进程的一个实体。

进程——资源分配的最小单位，线程——程序执行的最小单位。
============================================
冒泡排序：
for(int i =0;i<array.length;i++){
            for(int j =0;j<array.length-1-i;j++){
                if(array[j+1]<array[j]){
                    int temp = array[j+1];
                    array[j+1] =array[j];
                    array[j] = temp;
                }
            }

        }
选择排序：
for(int i =0;i<array.length;i++){
            int min = i;
            for (int j = i; j <array.length ; j++) {

                min = j;      if(array[j]<array[min]){
                }
            }
            int temp = array[min];
            array[min] = array[i];
            array[i] = temp;
        }
============================================
分布式和微服务区别：分布式属于微服务
去饭店吃饭就是一个完整的业务，饭店的厨师、配菜师、传菜员、服务员就是分布式；厨师、配菜师、传菜员和服务员都不止一个人，这就是集群；
分布式就是微服务的一种表现形式，分布式是部署层面，微服务是设计层面。
===============================================
在Spring的AOP编程中：
如果加入容器的目标对象有实现接口，用JDK代理
如果目标对象没有实现接口，用Cglib代理		
==========================================
单例模式：
饿汉式
public class HungrySingleton
{
    private static final HungrySingleton instance=new HungrySingleton();
    private HungrySingleton(){}
    public static HungrySingleton getInstance()
    {
        return instance;
    }
}
懒汉式：
public class LazySingleton
{
    public static void main(String[] args)
    {
        President zt1=President.getInstance();
        zt1.getName();    //输出总统的名字
        President zt2=President.getInstance();
        zt2.getName();    //输出总统的名字
        if(zt1==zt2)
        {
           System.out.println("他们是同一人！");
        }
        else
        {
           System.out.println("他们不是同一人！");
        }
    }
}
class President
{
    private static volatile President instance=null;    //保证instance在所有线程中同步
    //private避免类在外部被实例化
    private President()
    {
        System.out.println("产生一个总统！");
    }
    public static synchronized President getInstance()
    {
        //在getInstance方法上加同步
        if(instance==null)
        {
               instance=new President();
        }
        else
        {
           System.out.println("已经有一个总统，不能产生新总统！");
        }
        return instance;
    }
    public void getName()
    {
        System.out.println("我是美国总统：特朗普。");
    }  
}
====================================================
String s = new String(“hello”)会创建2（1）个对象，String s = “hello”创建1（0）个对象。 
注：当字符串常量池中有对象hello时括号内成立！
字符串如果是变量相加，先开空间，在拼接。
字符串如果是常量相加，是先加，然后在常量池找，如果有就直接返回，否则，就创建。
===================================================================================
关于integer和int：
  ①无论如何，Integer与new Integer不会相等。不会经历拆箱过程，i3的引用指向堆，而i4指向专门存放他的内存（常量池），他们的内存地址不一样，所以为false
  ②两个都是非new出来的Integer，如果数在-128到127之间，则是true,否则为false
  java在编译Integer i2 = 128的时候,被翻译成-> Integer i2 = Integer.valueOf(128);而valueOf()函数会对-128到127之间的数进行缓存
  ③两个都是new出来的,都为false
  ④int和integer(无论new否)比，都为true，因为会把Integer自动拆箱为int再去比
==========================================
用tkmybatis时 pojo类对象 要加@table(表名) @id（对应表主键） 忽略字段用 @Transient

自动点request  ：http://localhost:10789/demo/execute/Amazon.co.uk


所有的源代码很多时候是用来阅读的，只有很少的时间是用来执行的。
========================================================\
阿里云控制台：子账号 ：miaophy@1931056452267454.onaliyun.com 密碼:Ldm@2019.
 10.0.50.101 密码123
====================================
对静态代理、JDK动态代理、CGLib动态代理做一个总结，静态代理的维护成本比较高，有一个被代理类就需要创建一个代理类，而且需要实现相同的接口。JDK动态代理模式和CGLib动态代理的区别是JDK动态代理需要被代理类实现接口，
而CGLib则是生成被代理类的子类，要求被代理类不能是final的，因为final类无法被继承。
=========================================
分布式锁：
如果在一个分布式系统中，我们从数据库中读取一个数据，然后修改保存，这种情况很容易遇到并发问题。因为读取和更新保存不是一个原子操作，在并发时就会导致数据的不正确。这种场景其实并不少见，比如电商秒杀活动，库存数量的更新就会遇到。如果是单机应用，直接使用本地锁就可以避免。如果是分布式应用，本地锁派不上用场，这时就需要引入分布式锁来解决。
由此可见分布式锁的目的其实很简单，就是为了保证多台服务器在执行某一段代码时保证只有一台服务器执行。
基于 Redis 实现的分布式锁，一个严谨的的流程如下：
1. 加锁：SET $lock key $unique_ id EX $expire time NX
2.操作共享资源
3.释放锁：Lua 脚本，先GET 判断锁是杏归属自己， 再DEL释放锁
